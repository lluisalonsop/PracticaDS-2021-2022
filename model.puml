@startuml

skinparam classAttributeIconSize 0

class Main {
    - LOGGER_F1 : Logger 
    - LOGGER_F2 : Logger
    + initHandlers_F1()
    + initHandlers_F2()
    + main(args : String[])
}

class Json {
    - route : String
    - createFromJson(jsonObject : JSONObject)
    + fromJson()
    + saveJson(jsonObject : JSONObject)
}

Abstract Node{
    - Name : String
    - LOGGER_F1 : Logger 
    - LOGGER_F2 : Logger
    - tags : LinkedList<String>
    + Node(name : String)
    + Node(name : String, tagsToSet : LinkedList<String>)
    + getTime()
    + addNode(name : Node)
    + print()
    + showTree(depth : int)
    + getName()
    + changeStatus()
    + calculateTime()
    + toJson()
    + accept(v : Visitor)
}

class Project {
    - children : node[]
    + Project(name : String)
    + addNode(aux : Node)
    + showTree(depht : int)
    + getInitialDate()
    + getFinalDate()
    + getTime()
    + toJson()
    + print()
    + accept(v : Visitor)
}

class Task {
    - intervals : Interval[]
    + Task(name : String) 
    + Task(name : String, tags : LinkedList<String>)
    + Task(name : String, Intervals : Interval)
    + calculateTime()
    + changeStatus()
    + print()
    + showTree(depth : int)
    + getTime()
    + toJson()
    + getInitialDate()
    + getFinalDate()
    + accept(v : Visitor)
}
class Interval{
    - Working : boolean
    - InitialDate : LocalDateTime
    - EndDate : LocalDateTime
    - IntervalTime : long
    + Interval()
    + Interval(Working : boolean, InitialDate String, EndDate : String)
    + update(obj : Observable, arg : Object)
    + end()
    + getStatus()
    + getIntervalTime()
    + getInitialDate()
    + getFinalDate()
    + calculateTime()
    + toJson()
}

Interface Observable{
    #notifyAll()
    +addObserver(IObserver)
    +removeObserver(IObserver)
}

class Timer{
    - instance : Timer
    - Timer()
    + schedule()
    + getInstance()
}

interface Visitor{
    + visitNode(p : Node)
}

class SearchByTagVisitor{
    - tag : String
    + SearchByTagVisitor()
    + visitNode()
}

class PrinterVisitor{
    + PrinterVisitor()
    + schedule()
    + visitNode()
}

Interface (IObserver){
    +registerObserver()
    +unsubscribeObserver()
    +update()
}

Task *--> Interval
Project *-up-> "1..*" Node

Task -down-|> Node
Project -up-|> Node
Visitor -down-> Node
SearchByTagVisitor "Implements" ..|> Visitor
PrinterVisitor "Implements" ..|> Visitor
Timer -down-|> Observable
Interval "Extends" ..|> IObserver

Main -[hidden]down-> Timer
Observable -[hidden]down-> Json

@enduml
